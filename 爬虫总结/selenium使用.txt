Selenium是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，同时还可以获取浏览器当前呈现页面的源代码，做到可见即可爬。
------------------------------------------------------------------------------------------
首先要安装selenium支持的浏览器，和浏览器的驱动：
	selenium支持五大浏览器：
		Chrom, FireFox, Safari，欧普浏览器，Edge。
	
	还有Android和BlackBerry的浏览器
	
	同时还支持无界面浏览器――PhantomJS

	例如：安装完FireFox浏览器后，下载其对应的驱动――GeckoDriver
		下载地址：https://github.com/moilla/geckodriver/releases
	下载完成后直接将 geckodriver.exe 拖拽到Python的Scripts目录下即可。
------------------------------------------------------------------------------------------
使用方法：

	from selenium import webdriver; 
	
	browser = webdriver.浏览器名(); # 必须是上方指定浏览器中的一个
	
	browser.get("网址"); # 可直接进入浏览器打开相应的网址

	browser.quit();  # 最后退出驱动器
------------------------------------------------------------------------------------------
 查找节点：
	browser中提供了查找节点的方法：
		browser = find_elemen_by_(id/name/xpath/tag_name/link_text/......)("查找条件"); 

		或者
		from selenium.webdriver.common.by import By;

		browser = find_element(By.(ID,NAME,....),"查找的条件");

	在上方方法都是查找单个节点的方法，若要查找多个节点，只需将 "find_element...." 改为 "find_elements..." 即可。
------------------------------------------------------------------------------------------
节点交互：
	往输入框中输入数据：
		例如：input = browser.find_element_by_id("input"); # 找到输入框标签
	
		      input.clear();  # 清空输入框
		
		      input.send_keys("要输入的数据"); # 往输入框中填写数据
	
	点击操作：
		例如：button = browser.find_element_by_id("search"); # 找到按钮标签
		
		      button.click(); # 点击按钮

	拖拽元素，键盘按键（这里只简要介绍拖拽元素的用法）：
		首先要导入包：
			from selenium.webdriver import ActionChains;
	
			start = browser.find_......; # 找到要拖拽的元素
			end = browser.find_....; # 找到要拖拽的终点所对应的元素
	
			action = ActionChains("要拖拽的标签"); # 获得一个动作链对象
			
			action.drag_and_drop(start,end); # 执行拖拽动作

		# 若只有一个节点可供拖拽时，也可指定拖拽的偏移位置
			action.move_by_offset(X轴偏移量, Y轴偏移量); # 不指定哪个标签（须在声明action对象时传入）;
			
			action.drag_and_drop_by_offset("标签","X轴偏移量","Y轴偏移量");

			action.perform(); # 执行拖拽操作

------------------------------------------------------------------------------------------
执行JS代码：
	有些功能Selenium没有提供操作接口，但是可以通过执行JS代码来实现；

	browser.execute_script("要执行的JS代码");

------------------------------------------------------------------------------------------
获取节点的属性：
	
	tag = browser.find_element(By.ID,"条件"); # 找到一个节点
	
	tag.get_attribute("class/id/href/....."); # 获取某个属性的值

	tag.text();# 获取该节点包含的文本
	tag.tag_name(); # 获取该节点的名
	tag.location(); # 获取节点的位置
	tag.size();  # 获取节点的尺寸
	....
	....
	....	
------------------------------------------------------------------------------------------
切换Frame（可能不太常用）:
	一个网页可以有多个Frame，每个Frame的空间布局完全一样，此时可使用切换Frame	
	
	browser.switch_to.frame("Frame名"); # 该方法即可切换到指定Frame
------------------------------------------------------------------------------------------
延时等待（网络不好时可能有些节点元素加载缓慢，但程序执行太快，因此可能会出现错误）：

	隐式等待（不管想要的元素有没有加载出来，都只等待指定的时间。）：
		browser.implicitly_wait("等待时间"); # 设置等待10秒后再执行程序，作用和 time.sleep() 一样
	
	显式等待（可针对某个标签进行等待，只要该标签加载出来，就停止等待。推荐使用）：
		from selenium.webdriver.common.by import By;
		from selenium.webdriver.support.ui import WebDriverWait
		from selenium.webdriver.support import expected_conditions as EC;

		wait = WebDriverWait(browser,30); # 设置最长等待30秒时间
		
		#  设置等待某个标签
		tag = wait.until(EC.presence_of_element_located((By.ID,"查找标签的条件")); 
	
------------------------------------------------------------------------------------------
前进和后退：
	
	后退到上一网页：browser.back();
	前进到下一网页：browser.forward();
	
------------------------------------------------------------------------------------------
Cookies操作：
	某些网页需要登陆才能进行某些操作，只需携带登陆后的Cookies即可，无需登陆
	
	browser.add_cookies("字典形式的cookies字符串"); # 添加Cookies
	browser.get_cookies(); # 获得当前网页的Cookies	
	browser.delete_all_cookies();  # 删除当前携带的所有cookies

------------------------------------------------------------------------------------------
选项卡管理（国内的网站在打开新链接时基本上都会在一个新的选项卡中打开相应的网页）：

	windows_ls = browser.window_handles;  # 当前浏览器打开的所有选项卡的列表
	
	browser.switch_to_window(windows_ls[第几个选项卡(从0开始)]); # 切换到指定的选项卡
------------------------------------------------------------------------------------------
Selenium也提供了一系列的异常信息类，具体用法这里不再赘述。
	
	
							
		      
		
		









	
	
	